name: reload

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: "provide aws instance name"
        required: true
        type: string
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - uat
          - prod
          - preprod
jobs:
  sharpsell:
    name: testing-sharpsell
    runs-on: ubuntu-latest
    steps:
      - name: Check Instance Name
        id: check_instance_name
        run: |
          # Input from the workflow_dispatch
          raw_input="${{ github.event.inputs.instance_name }}"
          echo "Raw input: $raw_input"

          # Split raw_input into an array (assumes comma-separated input)
          IFS=',' read -r -a unt_instance_array <<< "$raw_input"
          
          # Environment input
          env="${{ github.event.inputs.env }}"
          echo "Environment: $env"

          # Initialize array for trimmed instances
          instance_array=()

          for instance in "${unt_instance_array[@]}"; do
            trimmed_instance=$(echo "$instance" | xargs) # Trim spaces
            echo "Processing instance: $trimmed_instance"
            instance_array+=("$trimmed_instance")

            if [[ "$trimmed_instance" != *"$env"* ]]; then
              echo "Error: Environment '$env' not present in instance name '$trimmed_instance'"
              exit 1
            fi
          done

          echo "All instances validated successfully!"
          echo "$instance_array"
          echo "instance_array=$instance_array" >> $GITHUB_OUTPUT
          
          
      - name: Set environment variable
        id: set_env_var
        run: |
          x=${{ steps.set_env_var.outputs.instance_array }}
          echo "$x"
          echo "MY_ENV_VAR=myValue" >> $GITHUB_OUTPUT
          
      - name: Use environment variable
        id: use_env_var
        run: |
          x=${{ steps.set_env_var.outputs.MY_ENV_VAR }}
          echo "$x"
          echo "The value of MY_ENV_VAR is $MY_ENV_VAR"
          echo "is_error=false" >> $GITHUB_OUTPUT
      
      - name: "Exit with failure if status != SUCCEEDED"
        if: steps.set_env_var.outputs.MY_ENV_VAR != 'myValue' || steps.use_env_var.outputs.is_error == 'true'
        run: exit 1
