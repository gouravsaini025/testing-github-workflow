name: reload

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: "provide aws instance name"
        required: true
        type: string
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - uat
          - prod
          - preprod
jobs:
  sharpsell:
    name: testing-sharpsell
    runs-on: ubuntu-latest
    steps:
      - name: Check Instance Name
        id: check_instance_name
        run: |
          # Input from the workflow_dispatch
          raw_input="${{ github.event.inputs.instance_name }}"
          echo "Raw input: $raw_input"

          # Split raw_input into an array (assumes comma-separated input)
          IFS=',' read -r -a unt_instance_array <<< "$raw_input"
          
          # Environment input
          env="${{ github.event.inputs.env }}"
          echo "Environment: $env"

          # Initialize array for trimmed instances
          trimmed_instances=""

          for instance in "${unt_instance_array[@]}"; do
            trimmed_instance=$(echo "$instance" | xargs) # Trim spaces
            
            echo "Processing instance: $trimmed_instance"
            if [[ "$trimmed_instance" != *"$env"* ]]; then
              echo "Error: Environment '$env' not present in instance name '$trimmed_instance'"
              exit 1
            fi

            if [ -z "$trimmed_instances" ]; then
              trimmed_instances="$trimmed_instance"
            else
              trimmed_instances="$trimmed_instances,$trimmed_instance"
            fi
            
          done

          echo "All instances validated successfully!"
          echo "$trimmed_instances"
          echo "trimmed_instances=$trimmed_instances" >> $GITHUB_OUTPUT
      - name :
        id: start_aws_instance
        run: |
          # create a multiline slack message to temporary file
          echo "" >> awsmultilineslackmessage.txt

          echo "instance 33 instance_id 55 :white_check_mark: "  >> awsmultilineslackmessage.txt

          echo "instance_id 66 instance_id66 :x:  error: $start_output" >> awsmultilineslackmessage.txt

          aws_slack_message="$(<awsmultilineslackmessage.txt)"
          {
            echo 'aws_slack_message<<EOF'
            echo "$aws_slack_message"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Format Slack Message
        id: format_slack_message
        run: |
          # create a multiline slack message to temporary file
          echo "" >> multilineslackmessage.txt
          echo "action: *Start EC2 Instance*" >> multilineslackmessage.txt
          echo "\`action\`: *Start EC2 Instance* " >> multilineslackmessage.txt
          echo "*Upgraded By:* \`${{ github.actor }}\`" >> multilineslackmessage.txt
          current_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "*Upgraded at:* \`$current_date\`" >> multilineslackmessage.txt

          # Add the AWS status message
          aws_slack_message="---------
*Company Code:* \`glowderma\`
*Environment:* \`prod\`

:black_left_pointing_double_triangle_with_vertical_bar: *Before Upgrade*
*Versions:* \`\`\`
{
  \"Sprint Name\": \": Firestorm Release 3.19.22\",
  \"Last Reloaded On\": \": 2024-07-18 20:18:22\",
  \"Sharpsell Backend\": \": v3.1.94-hf2\",
  \"Sharpsell Python Backend\": \": v1.0.46-hf2\",
  \"Convergence\": \": v1.7.0-hf2\",
  \"Core Service\": \": v1.1.52\",
  \"Poster Backend\": \": v1.0.4-hf2\",
  \"Superset\": \": v1.0.3\",
  \"Superset React App\": \": v1.0.10\",
  \"Superset Backend App\": \": v1.0.10\",
  \"Moengage\": \": v1.0.1\",
  \"SS Cron Job\": \": v1.0.3\",
  \"React DPE Web App\": \": v1.0.5\",
  \"Web Admin (/admin)\": \": v3.19.0\",
  \"Infra Version\": \": v1.0.77-hf2\"
}
\`\`\`

:arrow_forward: *After Upgrade*
*Codebuild ID:* \`sharpsell-core-reload-services-v2:f51c7369-a1e5-4971-9c75-3ab844eb1a51\`
*Upgraded By:* \`gouravsaini025\`
*Upgrade Status:* \`SUCCESS\` :white_check_mark:
*Upgraded at:* \`2025-04-02 15:50:10 UTC\`
*Sprint Name:* \`Mad Max Release - v4.0.28\`
*Upgraded Versions:* \`\`\`
{
  \"poster_api_img_version\": \"v1.0.6\",
  \"ss_cron_jobs_img_version\": \"v1.0.8-hf1\",
  \"mo_engage_img_version\": \"v1.0.1\",
  \"sharpsellbackend_img_version\": \"v3.1.171-hf3\",
  \"infra_version\": \"v1.0.102-hf6\",
  \"superset_react_img_version\": \"v1.0.10\",
  \"superset_app_img_version\": \"v1.0.7\",
  \"superset_backend_img_version\": \"v1.0.11\",
  \"py_api_img_version\": \"v1.0.98-hf7\",
  \"core_service_api_img_version\": \"v1.1.71-hf1\",
  \"react_dpe_app_img_version\": \"v1.0.6\",
  \"web_admin_version\": \"sprint-madmax\",
  \"convergence_api_img_version\": \"v1.18.0-hf1\",
  \"posters_app_version\": \"v3.0.7\",
  \"py_etl_img_version\": \"v1.1.0-hf8\"
}
\`\`\`

-----"
          
          echo "$aws_slack_message" 
          echo "$aws_slack_message" >> multilineslackmessage.txt
          slack_message="$(<multilineslackmessage.txt)"
          {
            echo 'slack_message<<EOF'
            echo "$slack_message"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name : see message
        id: see_message
        run : |
          message='${{ steps.format_slack_message.outputs.slack_message }}'
          echo "$message"

      - name: "Send Slack Notification"
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
        env:
          # Unescape new line from slack_message env variable and set it to SLACK_MESSAGE
          SLACK_MESSAGE: ${{ steps.format_slack_message.outputs.slack_message }}
          SLACK_WEBHOOK: ${{ secrets.TESTING_SHARPSELL_SLACK_WEBHOOK }}
          
      # - name: Set environment variable
      #   id: set_env_var
      #   run: |
      #     x=${{ steps.check_instance_name.outputs.trimmed_instances }}
      #     echo "$x"
      #     echo "MY_ENV_VAR=myValue" >> $GITHUB_OUTPUT
          
      # - name: Use environment variable
      #   id: use_env_var
      #   run: |
      #     x=${{ steps.set_env_var.outputs.MY_ENV_VAR }}
      #     echo "$x"
      #     echo "The value of MY_ENV_VAR is $MY_ENV_VAR"
      #     echo "is_error=false" >> $GITHUB_OUTPUT
      
      # - name: "Exit with failure if status != SUCCEEDED"
      #   if: steps.set_env_var.outputs.MY_ENV_VAR != 'myValue' || steps.use_env_var.outputs.is_error == 'true'
      #   run: exit 1
