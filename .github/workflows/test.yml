name: reload

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: "provide aws instance name"
        required: true
        type: string
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - uat
          - prod
          - preprod
jobs:
  sharpsell:
    name: testing-sharpsell
    runs-on: ubuntu-latest
    steps:
      - name: Check Instance Name
        id: check_instance_name
        run: |
          # Input from the workflow_dispatch
          raw_input="${{ github.event.inputs.instance_name }}"
          echo "Raw input: $raw_input"

          # Split raw_input into an array (assumes comma-separated input)
          IFS=',' read -r -a unt_instance_array <<< "$raw_input"
          
          # Environment input
          env="${{ github.event.inputs.env }}"
          echo "Environment: $env"

          # Initialize array for trimmed instances
          trimmed_instances=""

          for instance in "${unt_instance_array[@]}"; do
            trimmed_instance=$(echo "$instance" | xargs) # Trim spaces
            
            echo "Processing instance: $trimmed_instance"
            if [[ "$trimmed_instance" != *"$env"* ]]; then
              echo "Error: Environment '$env' not present in instance name '$trimmed_instance'"
              exit 1
            fi

            if [ -z "$trimmed_instances" ]; then
              trimmed_instances="$trimmed_instance"
            else
              trimmed_instances="$trimmed_instances,$trimmed_instance"
            fi
            
          done

          echo "All instances validated successfully!"
          echo "$trimmed_instances"
          echo "trimmed_instances=$trimmed_instances" >> $GITHUB_OUTPUT
      - name :
        id: start_aws_instance
        run: |
          # create a multiline slack message to temporary file
          echo "" >> awsmultilineslackmessage.txt

          echo "instance 33 instance_id 55 :white_check_mark: "  >> awsmultilineslackmessage.txt

          echo "instance_id 66 instance_id66 :x:  error: $start_output" >> awsmultilineslackmessage.txt

          aws_slack_message="$(<awsmultilineslackmessage.txt)"
          {
            echo 'aws_slack_message<<EOF'
            echo "$aws_slack_message"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name : Format Slack Message
        id : format_slack_message
        run : |
          
          # create a multiline slack message to temporary file
          echo "" >> multilineslackmessage.txt
          echo "*Upgraded By:* \`${{ github.actor }}\`" >> multilineslackmessage.txt
          current_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "*Upgraded at:* \`$current_date\`" >> multilineslackmessage.txt

          aws_slack_message='${{ steps.start_aws_instance.outputs.aws_slack_message }}'
          echo "$aws_slack_message" 
          echo "$aws_slack_message" >> multilineslackmessage.txt
          slack_message="$(<multilineslackmessage.txt)"
          {
            echo 'slack_message<<EOF'
            echo "$slack_message"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name : see message
        id: see_message
        run : |
          message='${{ steps.format_slack_message.outputs.slack_message }}''
          echo "$message"
          
          
      - name: Set environment variable
        id: set_env_var
        run: |
          x=${{ steps.check_instance_name.outputs.trimmed_instances }}
          echo "$x"
          echo "MY_ENV_VAR=myValue" >> $GITHUB_OUTPUT
          
      - name: Use environment variable
        id: use_env_var
        run: |
          x=${{ steps.set_env_var.outputs.MY_ENV_VAR }}
          echo "$x"
          echo "The value of MY_ENV_VAR is $MY_ENV_VAR"
          echo "is_error=false" >> $GITHUB_OUTPUT
      
      - name: "Exit with failure if status != SUCCEEDED"
        if: steps.set_env_var.outputs.MY_ENV_VAR != 'myValue' || steps.use_env_var.outputs.is_error == 'true'
        run: exit 1
